import React from "react";
import Plot from "react-plotly.js";

function ScatterPlot() {
  const clusters = [
    0, 1, 3, 0, 3, 0, 0, 0, 0, 2, 0, 3, 0, 0, 3, 0, 0, 1, 0, 3, 3, 0, 0, 0, 3,
    3, 1, 2, 2, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 0, 0, 0, 3, 0, 3, 0, 0,
    0, 3, 0, 0, 0, 3, 0, 2, 2, 3, 2, 0, 0, 3, 0, 3, 4, 1, 1, 1, 3, 3, 3, 3, 1,
    1, 4, 0, 1, 4, 1, 4, 0, 2, 1, 4, 3, 4, 1, 4, 1, 4, 0, 4, 4, 3, 2, 0, 3, 4,
    4, 4, 2, 1, 4, 4, 4, 4, 4, 1, 4, 3, 2, 1, 1, 4, 1, 4, 4, 1, 4, 1, 0, 0, 4,
    1, 2, 2,
  ];

  return (
    <Plot
      data={[
        {
          x: [
            "S",
            "U",
            "U",
            "S",
            "S",
            "S",
            "S",
            "D",
            "S",
            "S",
            "S",
            "U",
            "S",
            "S",
            "U",
            "S",
            "S",
            "U",
            "U",
            "U",
            "U",
            "S",
            "S",
            "S",
            "U",
            "U",
            "U",
            "S",
            "S",
            "S",
            "S",
            "S",
            "U",
            "U",
            "U",
            "S",
            "S",
            "U",
            "U",
            "S",
            "S",
            "U",
            "S",
            "S",
            "S",
            "U",
            "S",
            "U",
            "S",
            "S",
            "S",
            "U",
            "S",
            "S",
            "S",
            "S",
            "S",
            "S",
            "S",
            "U",
            "U",
            "S",
            "S",
            "U",
            "S",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "S",
            "1",
            "1",
            "U",
            "U",
            "S",
            "S",
            "U",
            "U",
            "S",
            "1",
            "U",
            "1",
            "1",
            "1",
            "S",
            "1",
            "1",
            "S",
            "S",
            "S",
            "S",
            "U",
            "1",
            "U",
            "S",
            "1",
            "1",
            "1",
            "1",
            "1",
            "U",
            "1",
            "1",
            "S",
            "S",
            "U",
            "1",
            "U",
            "1",
            "U",
            "1",
            "U",
            "U",
            "1",
            "S",
            "S",
            "U",
            "U",
            "S",
            "S",
          ],
          y: [
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "U",
            "M",
            "F",
            "U",
            "U",
            "M",
            "U",
            "U",
            "U",
            "U",
            "U",
            "M",
            "U",
            "U",
            "F",
            "F",
            "F",
            "U",
            "U",
            "F",
            "M",
            "U",
            "F",
            "F",
            "F",
            "U",
            "M",
            "U",
            "F",
            "M",
            "U",
            "U",
            "U",
            "U",
            "M",
            "M",
            "M",
            "U",
            "U",
            "F",
            "M",
            "M",
            "M",
            "M",
            "U",
            "M",
            "U",
            "U",
            "U",
            "U",
            "M",
            "U",
            "M",
            "M",
            "U",
            "M",
            "U",
            "U",
            "U",
            "M",
            "F",
            "U",
            "U",
          ],
          z: [
            1.12, 1.12, 0.93, 1.9, 1.9, 1.9, 0.93, 0.93, 0.93, 1.27, 1.27, 0.84,
            0.95, 0.95, 0.56, 1.01, 1.12, 1.12, 0.95, 2.312, 1.9, 0.95, 0.95,
            0.95, 0.92, 0.9, 1.27, 0.4, 0.4, 0.85, 1.12, 1.12, 1.12, 1.6, 2.03,
            1.2, 0.85, 1.3, 0.85, 1.6, 1.6, 2.19, 1.02, 1.02, 1.02, 1.01, 0.56,
            1.2, 0.56, 0.56, 0.56, 1.49, 1.58, 0.95, 0.95, 0.85, 1.27, 1.27,
            1.27, 1.55, 0.4, 1.25, 1.25, 1.58, 0.95, 1.02, 1.6, 0.7, 1.4, 1.0,
            1.1, 1.22, 1.25, 1.07, 1.0, 1.0, 1.0, 0.7, 1.0, 0.7, 0.7, 0.7, 0.7,
            0.4, 0.7, 1.0, 1.07, 1.0, 0.7, 0.7, 1.0, 1.0, 0.7, 1.0, 1.0, 1.07,
            0.4, 0.7, 1.07, 1.0, 1.0, 1.0, 0.4, 1.0, 0.7, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.07, 0.4, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.22, 1.22, 1.0, 0.7, 0.4, 0.4,
          ],
          mode: "markers",
          type: "scatter3d",
          scene: "scene1",
          name: "Lower the view point",
          marker: {
            color: clusters, // use the clusters array to set the color for each marker
            colorscale: "Viridis", // set the colorscale for the color mapping
            size: 10,
          },
        },
      ]}
      layout={{
        title: "Cluster Analysis",
        scene: {
          xaxis: {
            title: "Ply",
          },
          yaxis: {
            title: "Thickness",
          },
          zaxis: {
            title: "Depth",
          },
        },
        height: 800,
        width: 800,
        scene1: {
          camera: {
            center: { x: 0, y: 0, z: 0 },
            eye: { x: 2, y: 2, z: 0.1 },
            up: { x: 0, y: 0, z: 1 },
          },
        },
      }}
    />
  );
}

export default ScatterPlot;

// import Plot from "react-plotly.js";

// const clusters = [0, 1, 0, 1, 0, 3, 3, 3, 2, 2];
// // In this example, we have 3 data points in two clusters (cluster 0 and cluster 1).

// const data = [
//   {
//     x: [
//       "Male",
//       "Male",
//       "Female",
//       "Male",
//       "Unknown",
//       "Male",
//       "Female",
//       "Unknown",
//       "Male",
//       "Unknown",
//     ],
//     y: [0.5, 1.9, 1.5, 1.4, 0.9, 0, 0.2, 3, 4, 3],
//     z: [5, 2, 7, 1, 6, 3, 2, 1, 4, 5],
//     type: "scatter3d",
//     mode: "markers",
//     marker: {
//       color: clusters, // use the clusters array to set the color for each marker
//       colorscale: "Viridis", // set the colorscale for the color mapping
//       size: 12,
//     },
//   },
// ];

// const layout = {
//   title: "Fruit Sales",
//   scene: {
//     xaxis: {
//       title: "Sex",
//     },
//     yaxis: {
//       title: "Depth",
//     },
//     zaxis: {
//       title: "Price",
//     },
//   },
// };

// function ScatterPlot() {
//   return (
//     <div>
//       <Plot data={data} layout={layout} />
//     </div>
//   );
// }

// export default ScatterPlot;
